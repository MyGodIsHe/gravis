//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gravis.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
public partial class GravisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NUMBER=2, INTEGER=3, FLOAT=4, DOT=5, OPEN_PAREN=6, CLOSE_PAREN=7, 
		ASSIGN=8, RIGHT_SHIFT=9, ADD=10, MINUS=11, MUL=12, DIV=13, MOD=14, LESS_THAN=15, 
		GREATER_THAN=16, EQUALS=17, GT_EQ=18, LT_EQ=19, NOT_EQ=20, INPUT=21, OUTPUT=22, 
		IF=23, OPR=24, SUBSPACE=25, SELF=26, WHITESPACE=27, NAME=28;
	public const int
		RULE_file_input = 0, RULE_stmt = 1, RULE_link_stmt = 2, RULE_def_stmt = 3, 
		RULE_node_def = 4, RULE_input_def = 5, RULE_output_def = 6, RULE_const_def = 7, 
		RULE_if_def = 8, RULE_opr_def = 9, RULE_subspace_def = 10, RULE_self_subspace_def = 11, 
		RULE_dotted_name = 12, RULE_node_inst = 13, RULE_comp_op = 14, RULE_arith_op = 15;
	public static readonly string[] ruleNames = {
		"file_input", "stmt", "link_stmt", "def_stmt", "node_def", "input_def", 
		"output_def", "const_def", "if_def", "opr_def", "subspace_def", "self_subspace_def", 
		"dotted_name", "node_inst", "comp_op", "arith_op"
	};

	private static readonly string[] _LiteralNames = {
		null, "'const'", null, null, null, "'.'", "'['", "']'", "'='", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'=='", "'>='", "'<='", 
		"'!='", "'input'", "'output'", "'if'", "'opr'", "'subspace'", "'self'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NUMBER", "INTEGER", "FLOAT", "DOT", "OPEN_PAREN", "CLOSE_PAREN", 
		"ASSIGN", "RIGHT_SHIFT", "ADD", "MINUS", "MUL", "DIV", "MOD", "LESS_THAN", 
		"GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ", "INPUT", "OUTPUT", 
		"IF", "OPR", "SUBSPACE", "SELF", "WHITESPACE", "NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gravis.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GravisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GravisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GravisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class File_inputContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GravisParser.Eof, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public File_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterFile_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitFile_input(this);
		}
	}

	[RuleVersion(0)]
	public File_inputContext file_input() {
		File_inputContext _localctx = new File_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_file_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << INPUT) | (1L << OUTPUT) | (1L << IF) | (1L << OPR) | (1L << SUBSPACE) | (1L << NAME))) != 0)) {
				{
				{
				State = 32; stmt();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Def_stmtContext def_stmt() {
			return GetRuleContext<Def_stmtContext>(0);
		}
		public Link_stmtContext link_stmt() {
			return GetRuleContext<Link_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; def_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; link_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Link_stmtContext : ParserRuleContext {
		public Dotted_nameContext[] dotted_name() {
			return GetRuleContexts<Dotted_nameContext>();
		}
		public Dotted_nameContext dotted_name(int i) {
			return GetRuleContext<Dotted_nameContext>(i);
		}
		public ITerminalNode RIGHT_SHIFT() { return GetToken(GravisParser.RIGHT_SHIFT, 0); }
		public Link_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterLink_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitLink_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Link_stmtContext link_stmt() {
		Link_stmtContext _localctx = new Link_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_link_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; dotted_name();
			State = 45; Match(RIGHT_SHIFT);
			State = 46; dotted_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_stmtContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GravisParser.NAME, 0); }
		public ITerminalNode ASSIGN() { return GetToken(GravisParser.ASSIGN, 0); }
		public Node_defContext node_def() {
			return GetRuleContext<Node_defContext>(0);
		}
		public Def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterDef_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitDef_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Def_stmtContext def_stmt() {
		Def_stmtContext _localctx = new Def_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_def_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(NAME);
			State = 49; Match(ASSIGN);
			State = 50; node_def();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_defContext : ParserRuleContext {
		public Input_defContext input_def() {
			return GetRuleContext<Input_defContext>(0);
		}
		public Output_defContext output_def() {
			return GetRuleContext<Output_defContext>(0);
		}
		public Const_defContext const_def() {
			return GetRuleContext<Const_defContext>(0);
		}
		public If_defContext if_def() {
			return GetRuleContext<If_defContext>(0);
		}
		public Opr_defContext opr_def() {
			return GetRuleContext<Opr_defContext>(0);
		}
		public Subspace_defContext subspace_def() {
			return GetRuleContext<Subspace_defContext>(0);
		}
		public Self_subspace_defContext self_subspace_def() {
			return GetRuleContext<Self_subspace_defContext>(0);
		}
		public Node_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterNode_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitNode_def(this);
		}
	}

	[RuleVersion(0)]
	public Node_defContext node_def() {
		Node_defContext _localctx = new Node_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_node_def);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; input_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; output_def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54; const_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 55; if_def();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 56; opr_def();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 57; subspace_def();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 58; self_subspace_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_defContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(GravisParser.INPUT, 0); }
		public Input_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterInput_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitInput_def(this);
		}
	}

	[RuleVersion(0)]
	public Input_defContext input_def() {
		Input_defContext _localctx = new Input_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_input_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(INPUT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_defContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(GravisParser.OUTPUT, 0); }
		public Output_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterOutput_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitOutput_def(this);
		}
	}

	[RuleVersion(0)]
	public Output_defContext output_def() {
		Output_defContext _localctx = new Output_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_output_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(OUTPUT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_defContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(GravisParser.OPEN_PAREN, 0); }
		public ITerminalNode NUMBER() { return GetToken(GravisParser.NUMBER, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(GravisParser.CLOSE_PAREN, 0); }
		public Const_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterConst_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitConst_def(this);
		}
	}

	[RuleVersion(0)]
	public Const_defContext const_def() {
		Const_defContext _localctx = new Const_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_const_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__0);
			State = 66; Match(OPEN_PAREN);
			State = 67; Match(NUMBER);
			State = 68; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_defContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(GravisParser.IF, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(GravisParser.OPEN_PAREN, 0); }
		public Comp_opContext comp_op() {
			return GetRuleContext<Comp_opContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(GravisParser.CLOSE_PAREN, 0); }
		public If_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterIf_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitIf_def(this);
		}
	}

	[RuleVersion(0)]
	public If_defContext if_def() {
		If_defContext _localctx = new If_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_if_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(IF);
			State = 71; Match(OPEN_PAREN);
			State = 72; comp_op();
			State = 73; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opr_defContext : ParserRuleContext {
		public ITerminalNode OPR() { return GetToken(GravisParser.OPR, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(GravisParser.OPEN_PAREN, 0); }
		public Arith_opContext arith_op() {
			return GetRuleContext<Arith_opContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(GravisParser.CLOSE_PAREN, 0); }
		public Opr_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opr_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterOpr_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitOpr_def(this);
		}
	}

	[RuleVersion(0)]
	public Opr_defContext opr_def() {
		Opr_defContext _localctx = new Opr_defContext(Context, State);
		EnterRule(_localctx, 18, RULE_opr_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(OPR);
			State = 76; Match(OPEN_PAREN);
			State = 77; arith_op();
			State = 78; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subspace_defContext : ParserRuleContext {
		public ITerminalNode SUBSPACE() { return GetToken(GravisParser.SUBSPACE, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(GravisParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(GravisParser.CLOSE_PAREN, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Subspace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subspace_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterSubspace_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitSubspace_def(this);
		}
	}

	[RuleVersion(0)]
	public Subspace_defContext subspace_def() {
		Subspace_defContext _localctx = new Subspace_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_subspace_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(SUBSPACE);
			State = 81; Match(OPEN_PAREN);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 82; stmt();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << INPUT) | (1L << OUTPUT) | (1L << IF) | (1L << OPR) | (1L << SUBSPACE) | (1L << NAME))) != 0) );
			State = 87; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Self_subspace_defContext : ParserRuleContext {
		public ITerminalNode SUBSPACE() { return GetToken(GravisParser.SUBSPACE, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(GravisParser.OPEN_PAREN, 0); }
		public ITerminalNode SELF() { return GetToken(GravisParser.SELF, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(GravisParser.CLOSE_PAREN, 0); }
		public Self_subspace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_self_subspace_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterSelf_subspace_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitSelf_subspace_def(this);
		}
	}

	[RuleVersion(0)]
	public Self_subspace_defContext self_subspace_def() {
		Self_subspace_defContext _localctx = new Self_subspace_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_self_subspace_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(SUBSPACE);
			State = 90; Match(OPEN_PAREN);
			State = 91; Match(SELF);
			State = 92; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_nameContext : ParserRuleContext {
		public Node_instContext node_inst() {
			return GetRuleContext<Node_instContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(GravisParser.DOT, 0); }
		public ITerminalNode NAME() { return GetToken(GravisParser.NAME, 0); }
		public Dotted_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterDotted_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitDotted_name(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_nameContext dotted_name() {
		Dotted_nameContext _localctx = new Dotted_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_dotted_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; node_inst();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 95; Match(DOT);
				State = 96; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_instContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GravisParser.NAME, 0); }
		public Node_defContext node_def() {
			return GetRuleContext<Node_defContext>(0);
		}
		public Node_instContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_inst; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterNode_inst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitNode_inst(this);
		}
	}

	[RuleVersion(0)]
	public Node_instContext node_inst() {
		Node_instContext _localctx = new Node_instContext(Context, State);
		EnterRule(_localctx, 26, RULE_node_inst);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; Match(NAME);
				}
				break;
			case T__0:
			case INPUT:
			case OUTPUT:
			case IF:
			case OPR:
			case SUBSPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; node_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_opContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(GravisParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(GravisParser.GREATER_THAN, 0); }
		public ITerminalNode EQUALS() { return GetToken(GravisParser.EQUALS, 0); }
		public ITerminalNode GT_EQ() { return GetToken(GravisParser.GT_EQ, 0); }
		public ITerminalNode LT_EQ() { return GetToken(GravisParser.LT_EQ, 0); }
		public ITerminalNode NOT_EQ() { return GetToken(GravisParser.NOT_EQ, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterComp_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitComp_op(this);
		}
	}

	[RuleVersion(0)]
	public Comp_opContext comp_op() {
		Comp_opContext _localctx = new Comp_opContext(Context, State);
		EnterRule(_localctx, 28, RULE_comp_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << EQUALS) | (1L << GT_EQ) | (1L << LT_EQ) | (1L << NOT_EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arith_opContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GravisParser.ADD, 0); }
		public ITerminalNode MINUS() { return GetToken(GravisParser.MINUS, 0); }
		public ITerminalNode MUL() { return GetToken(GravisParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(GravisParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(GravisParser.MOD, 0); }
		public Arith_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arith_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.EnterArith_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGravisListener typedListener = listener as IGravisListener;
			if (typedListener != null) typedListener.ExitArith_op(this);
		}
	}

	[RuleVersion(0)]
	public Arith_opContext arith_op() {
		Arith_opContext _localctx = new Arith_opContext(Context, State);
		EnterRule(_localctx, 30, RULE_arith_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << MINUS) | (1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', 'n', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\a', '\x2', '$', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\'', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '>', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x6', '\f', 'V', '\n', '\f', '\r', '\f', '\xE', '\f', 'W', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x64', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 'h', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x2', '\x2', '\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x4', 
		'\x3', '\x2', '\x11', '\x16', '\x3', '\x2', '\f', '\x10', '\x2', 'h', 
		'\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', '\f', '?', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x41', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x12', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'M', '\x3', '\x2', '\x2', '\x2', '\x16', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '[', '\x3', '\x2', '\x2', '\x2', '\x1A', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', 'g', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'i', '\x3', '\x2', '\x2', '\x2', ' ', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\"', '$', '\x5', '\x4', '\x3', '\x2', '#', '\"', '\x3', '\x2', '\x2', 
		'\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', '\x2', 
		'\x2', '\x3', ')', '\x3', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x5', 
		'\b', '\x5', '\x2', '+', '-', '\x5', '\x6', '\x4', '\x2', ',', '*', '\x3', 
		'\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\x1A', '\xE', '\x2', '/', 
		'\x30', '\a', '\v', '\x2', '\x2', '\x30', '\x31', '\x5', '\x1A', '\xE', 
		'\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x1E', '\x2', '\x2', '\x33', '\x34', '\a', '\n', '\x2', '\x2', '\x34', 
		'\x35', '\x5', '\n', '\x6', '\x2', '\x35', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '>', '\x5', '\f', '\a', '\x2', '\x37', '>', '\x5', '\xE', 
		'\b', '\x2', '\x38', '>', '\x5', '\x10', '\t', '\x2', '\x39', '>', '\x5', 
		'\x12', '\n', '\x2', ':', '>', '\x5', '\x14', '\v', '\x2', ';', '>', '\x5', 
		'\x16', '\f', '\x2', '<', '>', '\x5', '\x18', '\r', '\x2', '=', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '=', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '=', ':', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', 
		'\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\v', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\a', '\x17', '\x2', '\x2', '@', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x18', '\x2', '\x2', '\x42', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x3', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\b', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\x4', '\x2', '\x2', '\x46', 'G', '\a', '\t', '\x2', '\x2', 'G', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '\x19', '\x2', '\x2', 'I', 
		'J', '\a', '\b', '\x2', '\x2', 'J', 'K', '\x5', '\x1E', '\x10', '\x2', 
		'K', 'L', '\a', '\t', '\x2', '\x2', 'L', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\a', '\x1A', '\x2', '\x2', 'N', 'O', '\a', '\b', '\x2', 
		'\x2', 'O', 'P', '\x5', ' ', '\x11', '\x2', 'P', 'Q', '\a', '\t', '\x2', 
		'\x2', 'Q', '\x15', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x1B', 
		'\x2', '\x2', 'S', 'U', '\a', '\b', '\x2', '\x2', 'T', 'V', '\x5', '\x4', 
		'\x3', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\t', 
		'\x2', '\x2', 'Z', '\x17', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', 
		'\x1B', '\x2', '\x2', '\\', ']', '\a', '\b', '\x2', '\x2', ']', '^', '\a', 
		'\x1C', '\x2', '\x2', '^', '_', '\a', '\t', '\x2', '\x2', '_', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x5', '\x1C', '\xF', '\x2', 
		'\x61', '\x62', '\a', '\a', '\x2', '\x2', '\x62', '\x64', '\a', '\x1E', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x65', 'h', '\a', '\x1E', '\x2', '\x2', '\x66', 'h', '\x5', '\n', '\x6', 
		'\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x1D', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\t', 
		'\x2', '\x2', '\x2', 'j', '\x1F', '\x3', '\x2', '\x2', '\x2', 'k', 'l', 
		'\t', '\x3', '\x2', '\x2', 'l', '!', '\x3', '\x2', '\x2', '\x2', '\b', 
		'%', ',', '=', 'W', '\x63', 'g',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
